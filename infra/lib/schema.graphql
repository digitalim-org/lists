schema {
  query: Query
  mutation: Mutation
}

"The status of an Item"
enum ItemStatus {
  "The Item still needs to be done"
  ACTIVE
  "The Item has been completed"
  DONE
}

"Todo is a todo item whose id corresponds to the list it is in"
type Todo {
  "The user who owns the todo"
  userID: ID!
  "Generated automatically for first in list"
  listID: String!
  "Sort key: generated automatically"
  itemID: String!
  "Title of the Todo"
  title: String!
  "The status of the Todo"
  status: ItemStatus!
}

"Input to a AddTodo Mutation"
input AddTodoInput {
  "Title of the new Todo"
  title: String!
  "The ID of the list this Todo should be added to. Autogenerated if not provided."
  listID: String
  # "Generated automatically"
  # id: ID
  # "Generated automatically"
  # createdAt: Long
  # "The status of the Todo"
  # status: ItemStatus
}

"Input to a MarkDone Mutation"
input MarkDoneInput {
  "The itemID of the Item to mark DONE"
  itemID: String!
}

"Mutations for Todo and Item"
type Mutation {
  "addTodo creates a new Todo"
  addTodo(input: AddTodoInput!): Todo
  "markDone sets the status of an Item to DONE"
  markDone(input: MarkDoneInput!): Todo
}

"Queries for Todo and Item"
type Query {
  "getTodos gets all the user's Todos"
  getTodos: [Todo]
}
